<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1207.1209.v69351208a_5a_7">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2121.vd87fb_6536d1e"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2121.vd87fb_6536d1e">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3536.vb_8a_6628079d5">
    <script>pipeline {
    agent any

    environment {
        DOCKER_REGISTRY_CREDENTIALS = credentials(&apos;da0a243d-d4c3-44de-bfed-64a982c8dab5&apos;)
        DOCKER_IMAGE_NAME = &apos;my-docker-build-image&apos;
        CONTAINER_NAME = &apos;my-docker-container&apos;
    }

    stages {
        stage(&apos;Checkout SCM&apos;) {
            steps {
                checkout scm
            }
        }

        stage(&apos;Build Docker Image&apos;) {
            steps {
                script {
                    def dockerImage = docker.build(DOCKER_IMAGE_NAME, &apos;-f Dockerfile .&apos;)
                }
            }
        }

        stage(&apos;Push Docker Image&apos;) {
            steps {
                script {
                    docker.withRegistry(&apos;https://docker.io&apos;, DOCKER_REGISTRY_CREDENTIALS) {
                	       docker.image(DOCKER_IMAGE_NAME).push()
                    }
                }
            }
        }

        stage(&apos;Run Docker Image&apos;) {
            steps {
                script {
                    def myContainer = docker.container().from(docker.image(DOCKER_IMAGE_NAME).run(&quot;-d&quot;, name: CONTAINER_NAME))
                }
            }
        }
    }

    post {
        always {
            script {
                try {
                    def myContainer = docker.image(DOCKER_IMAGE_NAME).container(CONTAINER_NAME)
                    myContainer.stop()
                    echo &quot;Container stopped successfully&quot;
                } catch (Exception e) {
                    echo &quot;Error stopping container: ${e}&quot;
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>