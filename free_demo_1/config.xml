<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1207.1209.v69351208a_5a_7">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2121.vd87fb_6536d1e"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2121.vd87fb_6536d1e">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>it is pushing docker images </description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3536.vb_8a_6628079d5">
    <script>pipeline {
    agent any 
    environment {
        //once you sign up for Docker hub, use that user_id here
        registry = &quot;chanikyavarmanalla/my-docker-image&quot;
        //- update your credentials ID after creating credentials for connecting to Docker Hub
        registryCredential = &apos;14ae160d-e567-46fc-a107-073fa8e06815&apos;
        dockerImage = &apos;&apos;
    }
    
    stages {
        stage(&apos;Cloning Git&apos;) {
            steps {
                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/main&apos;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &apos;&apos;, url: &apos;git@github.com:ChanikyaVarmaNalla/freestyle_demo.git&apos;]]])       
            }
        }
    
    // Building Docker images
    stage(&apos;Building image&apos;) {
      steps{
        script {
          dockerImage = docker.build registry
        }
      }
    }
    
     // Uploading Docker images into Docker Hub
    stage(&apos;Upload Image&apos;) {
     steps{    
         script {
            docker.withRegistry( &apos;&apos;, registryCredential ) {
            dockerImage.push()
            }
        }
      }
    }
    
    // Running Docker container, make sure port 8096 is opened in 
    stage(&apos;Docker Run&apos;) {
     steps{
         script {
           bat &quot;docker run %registry%&quot;
         }
      }
    }
  }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>